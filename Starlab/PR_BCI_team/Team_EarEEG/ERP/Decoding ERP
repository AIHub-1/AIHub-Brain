clear all;
cd C:\Users\yelee\Desktop\test_tc2_4
cd new_BBCI_toolbox 
startup_bbci_toolbox
cd ..

%% Data Load
dire = 'data';

for sub=1:8
    filename = sprintf('s%d',sub);
    epo_train{sub} = load(fullfile(dire,'train',filename)).epo;
    epo_test{sub} = load(fullfile(dire,'test',filename)).epo;
end

%% ival setting
ref_ival= [-200 0] ;
r_ival = [100 600];
% psn_ival = [-150 -50] ;
psn_ival = [-200 0] ;
p300_ival = [280 380];


%% training
eval(sprintf('epo = %s_epo_filt{j,1};',modal));

epo = proc_selectChannels(epo, chan);

% select ival
if ival_cfy_fixing == false
epo_r= proc_selectIval(epo, r_ival, 'IvalPolicy','minimal');
epo_r= proc_rSquareSigned(epo_r);
ival_cfy= procutil_selectTimeIntervals(epo_r);
disp('ival cfy non-fixing  -  Check ival_cfy')
end

slt_ival{j} = ival_cfy;

fv_Tr= proc_baseline(epo, ref_ival);
fv_Tr= proc_jumpingMeans(fv_Tr, ival_cfy);

xsz= size(fv_Tr.x);
fvsz= [prod(xsz(1:end-1)) xsz(end)];
% classifier C train_RLDAshrink
C = train_RLDAshrink(reshape(fv_Tr.x,fvsz), fv_Tr.y);


%% test
epo = EPO{j,speedIdx}; % pick epoch

epo = proc_selectChannels(epo, chan);
% epo = proc_selectChannels(epo, erp_chan);


fv_Te= proc_baseline(epo, ref_ival);
fv_Te= proc_jumpingMeans(fv_Te, ival_cfy);

xTesz= size(fv_Te.x);


%% test loss
outTe= apply_separatingHyperplane(C, reshape(fv_Te.x, [prod(xTesz(1:end-1)) xTesz(end)]));
lossTe = mean(loss_0_1(fv_Te.y, outTe));

outTr= apply_separatingHyperplane(C, reshape(fv_Tr.x, fvsz));

[loss_all] = loss_0_1(fv_Tr.y, outTr);
lossTr = mean(loss_all);

[ERP_per.roc, ERP_per.auc]= roc_curve(epo.y, outTe,'plot',0);

%excel_AUC(speedIdx-1, j) = ERP_per.auc;

